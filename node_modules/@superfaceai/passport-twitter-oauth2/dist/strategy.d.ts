/// <reference types="passport" />
import { Strategy as OAuth2Strategy } from 'passport-oauth2';
import { ProfileWithMetaData } from './models/profile';
import { StrategyOptions } from './models/strategyOptions';
/**
 * @public
 */
export declare class Strategy extends OAuth2Strategy {
    _userProfileURL: string;
    /**
     * Twitter strategy constructor
     *
     * Required options:
     *
     *   - `clientID` - your Twitter application's App ID
     *   - `clientSecret` - your Twitter application's App Secret
     *   - `callbackURL` - URL to which Twitter will redirect the user after granting authorization
     *   - `clientType` - your Twitter application (client) type, either `public` or `confidental`
     *
     * @remarks
     * The Twitter authentication strategy authenticates requests by delegating to
     * Twitter using the OAuth 2.0 protocol.
     *
     * Applications must supply a `verify` callback which accepts an `accessToken`,
     * `refreshToken` and service-specific `profile`, and then calls the `cb`
     * callback supplying a `user`, which should be set to `false` if the
     * credentials are not valid.  If an exception occured, `err` should be set.
     *
     * @example
     * ```
     * passport.use(new TwitterStrategy({
     *     clientType: 'confidential',
     *     clientID: 'client-identification',
     *     clientSecret: 'secret'
     *     callbackURL: 'https://www.example.net/auth/twitter/callback'
     *   },
     *   function(accessToken, refreshToken, profile, cb) {
     *     User.findOrCreate(..., function (err, user) {
     *       cb(err, user);
     *     });
     *   }
     * ));
     * ```
     */
    constructor(options: StrategyOptions, verify: (accessToken: string, refreshToken: string, profile: ProfileWithMetaData, done: (error: Error | null, user?: Express.User) => void) => void);
    /**
     * Retrieve user profile from Twitter.
     *
     * @remarks
     * This function fetches Twitter user info and maps it to normalized profile,
     * with the following properties parsed from Twitter user info response:
     *
     *   - `id`
     *   - `username`
     *   - `displayName`
     *   - `profileUrl`
     *   - `photos`
     */
    userProfile(accessToken: string, done: (error: Error | null, user?: ProfileWithMetaData) => void): void;
    addDefaultScopes(scopes: string[], options: StrategyOptions): string[];
}
